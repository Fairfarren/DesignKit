/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { CardData } from "../typing/index.d";
export { CardData } from "../typing/index.d";
export namespace Components {
    interface KitBox {
        "add": (data: CardData) => Promise<void>;
        "getDomList": () => Promise<CardData[]>;
        "height": number;
        "init": (list?: CardData[]) => Promise<void>;
        "updateCurrentData": (data: CardData) => Promise<void>;
        "width": number;
    }
    interface KitCard {
        "data": CardData;
    }
    interface KitMove {
        "data": CardData;
    }
    interface KitSvg {
        "data": CardData;
    }
}
export interface KitBoxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKitBoxElement;
}
export interface KitMoveCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKitMoveElement;
}
declare global {
    interface HTMLKitBoxElementEventMap {
        "currentDataChange": CardData;
    }
    interface HTMLKitBoxElement extends Components.KitBox, HTMLStencilElement {
        addEventListener<K extends keyof HTMLKitBoxElementEventMap>(type: K, listener: (this: HTMLKitBoxElement, ev: KitBoxCustomEvent<HTMLKitBoxElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLKitBoxElementEventMap>(type: K, listener: (this: HTMLKitBoxElement, ev: KitBoxCustomEvent<HTMLKitBoxElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLKitBoxElement: {
        prototype: HTMLKitBoxElement;
        new (): HTMLKitBoxElement;
    };
    interface HTMLKitCardElement extends Components.KitCard, HTMLStencilElement {
    }
    var HTMLKitCardElement: {
        prototype: HTMLKitCardElement;
        new (): HTMLKitCardElement;
    };
    interface HTMLKitMoveElementEventMap {
        "dataChanged": CardData;
    }
    interface HTMLKitMoveElement extends Components.KitMove, HTMLStencilElement {
        addEventListener<K extends keyof HTMLKitMoveElementEventMap>(type: K, listener: (this: HTMLKitMoveElement, ev: KitMoveCustomEvent<HTMLKitMoveElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLKitMoveElementEventMap>(type: K, listener: (this: HTMLKitMoveElement, ev: KitMoveCustomEvent<HTMLKitMoveElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLKitMoveElement: {
        prototype: HTMLKitMoveElement;
        new (): HTMLKitMoveElement;
    };
    interface HTMLKitSvgElement extends Components.KitSvg, HTMLStencilElement {
    }
    var HTMLKitSvgElement: {
        prototype: HTMLKitSvgElement;
        new (): HTMLKitSvgElement;
    };
    interface HTMLElementTagNameMap {
        "kit-box": HTMLKitBoxElement;
        "kit-card": HTMLKitCardElement;
        "kit-move": HTMLKitMoveElement;
        "kit-svg": HTMLKitSvgElement;
    }
}
declare namespace LocalJSX {
    interface KitBox {
        "height"?: number;
        "onCurrentDataChange"?: (event: KitBoxCustomEvent<CardData>) => void;
        "width"?: number;
    }
    interface KitCard {
        "data"?: CardData;
    }
    interface KitMove {
        "data"?: CardData;
        "onDataChanged"?: (event: KitMoveCustomEvent<CardData>) => void;
    }
    interface KitSvg {
        "data"?: CardData;
    }
    interface IntrinsicElements {
        "kit-box": KitBox;
        "kit-card": KitCard;
        "kit-move": KitMove;
        "kit-svg": KitSvg;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "kit-box": LocalJSX.KitBox & JSXBase.HTMLAttributes<HTMLKitBoxElement>;
            "kit-card": LocalJSX.KitCard & JSXBase.HTMLAttributes<HTMLKitCardElement>;
            "kit-move": LocalJSX.KitMove & JSXBase.HTMLAttributes<HTMLKitMoveElement>;
            "kit-svg": LocalJSX.KitSvg & JSXBase.HTMLAttributes<HTMLKitSvgElement>;
        }
    }
}
